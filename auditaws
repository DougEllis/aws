#!/usr/bin/env python3
"""
AWS Environment Audit Script
Outputs: 
 - aws_audit_extended.docx (Word)
 - aws_audit_extended.xlsx (Excel)
"""

import boto3
import pandas as pd
from docx import Document

# === Collect Core AWS Infra Data ===
def fetch_data():
    ec2 = boto3.client('ec2')
    
    vpcs = ec2.describe_vpcs()['Vpcs']
    vpc_data = [{'VPC ID': v['VpcId'], 'CIDR': v['CidrBlock'], 'Is Default': v.get('IsDefault', False)} for v in vpcs]

    subnets = ec2.describe_subnets()['Subnets']
    subnet_data = [{'Subnet ID': s['SubnetId'], 'VPC ID': s['VpcId'], 'CIDR': s['CidrBlock'], 'Public IP Auto-Assign': s.get('MapPublicIpOnLaunch', False)} for s in subnets]

    sgs = ec2.describe_security_groups()['SecurityGroups']
    sg_data = [{
        'Group ID': sg['GroupId'],
        'Group Name': sg['GroupName'],
        'VPC ID': sg.get('VpcId', 'N/A'),
        'Inbound Rules': str(sg.get('IpPermissions', [])),
        'Outbound Rules': str(sg.get('IpPermissionsEgress', []))
    } for sg in sgs]

    eips = ec2.describe_addresses()['Addresses']
    eip_data = [{
        'Public IP': e.get('PublicIp', 'N/A'),
        'Private IP': e.get('PrivateIpAddress', 'N/A'),
        'Instance ID': e.get('InstanceId', 'Unattached'),
        'Network Interface': e.get('NetworkInterfaceId', 'N/A')
    } for e in eips]

    return vpc_data, subnet_data, sg_data, eip_data, subnets, eips

# === IAM Users & Roles ===
def fetch_iam_data():
    iam = boto3.client('iam')
    users = iam.list_users()['Users']
    iam_user_data = []

    for user in users:
        mfa_devices = iam.list_mfa_devices(UserName=user['UserName'])['MFADevices']
        access_keys = iam.list_access_keys(UserName=user['UserName'])['AccessKeyMetadata']
        for key in access_keys:
            key_detail = iam.get_access_key_last_used(AccessKeyId=key['AccessKeyId'])['AccessKeyLastUsed']
            iam_user_data.append({
                'User': user['UserName'],
                'Access Key ID': key['AccessKeyId'],
                'Status': key['Status'],
                'Last Used': key_detail.get('LastUsedDate', 'Never'),
                'MFA Enabled': 'Yes' if mfa_devices else 'No'
            })

    roles = iam.list_roles()['Roles']
    iam_roles = [{'Role Name': r['RoleName'], 'Creation Date': r['CreateDate']} for r in roles]

    return iam_user_data, iam_roles

# === AWS Config Compliance Rules ===
def fetch_config_compliance():
    config = boto3.client('config')
    try:
        rules = config.describe_config_rules()['ConfigRules']
        compliance_data = []

        for rule in rules:
            result = config.get_compliance_details_by_config_rule(ConfigRuleName=rule['ConfigRuleName'])
            for eval in result['EvaluationResults']:
                compliance_data.append({
                    'Rule': rule['ConfigRuleName'],
                    'Compliance Type': eval['ComplianceType'],
                    'Evaluated At': eval['ResultRecordedTime'].strftime('%Y-%m-%d %H:%M:%S')
                })

        return compliance_data
    except Exception as e:
        return [{'Error': f"AWS Config not enabled or accessible: {str(e)}"}]

# === Public IP Usage Alerts ===
def fetch_public_ip_alerts(eips, subnets):
    alerts = []
    for eip in eips:
        if not eip.get('InstanceId') and not eip.get('NetworkInterfaceId'):
            alerts.append({'EIP': eip.get('PublicIp', 'N/A'), 'Issue': 'Unused Elastic IP (incurs cost)'})
    for sn in subnets:
        if sn.get('MapPublicIpOnLaunch'):
            alerts.append({'Subnet': sn['SubnetId'], 'Issue': 'Instances launched here get public IPs'})
    return alerts

# === Export to Word ===
def write_table(doc, title, data):
    doc.add_heading(title, level=2)
    if not data:
        doc.add_paragraph("No data available.")
        return
    table = doc.add_table(rows=1, cols=len(data[0]))
    hdr_cells = table.rows[0].cells
    for i, key in enumerate(data[0]):
        hdr_cells[i].text = key
    for item in data:
        row_cells = table.add_row().cells
        for i, key in enumerate(item):
            row_cells[i].text = str(item[key])
    doc.add_paragraph()

def export_to_word(filename, all_data, iam_data, config_data, ip_alerts):
    doc = Document()
    write_table(doc, "VPCs", all_data[0])
    write_table(doc, "Subnets", all_data[1])
    write_table(doc, "Security Groups", all_data[2])
    write_table(doc, "Elastic IPs", all_data[3])
    write_table(doc, "IAM Users", iam_data[0])
    write_table(doc, "IAM Roles", iam_data[1])
    write_table(doc, "AWS Config Compliance", config_data)
    write_table(doc, "Public IP Usage Alerts", ip_alerts)
    doc.save(filename)

# === Export to Excel ===
def export_to_excel(filename, all_data, iam_data, config_data, ip_alerts):
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        pd.DataFrame(all_data[0]).to_excel(writer, sheet_name='VPCs', index=False)
        pd.DataFrame(all_data[1]).to_excel(writer, sheet_name='Subnets', index=False)
        pd.DataFrame(all_data[2]).to_excel(writer, sheet_name='SecurityGroups', index=False)
        pd.DataFrame(all_data[3]).to_excel(writer, sheet_name='ElasticIPs', index=False)
        pd.DataFrame(iam_data[0]).to_excel(writer, sheet_name='IAM_Users', index=False)
        pd.DataFrame(iam_data[1]).to_excel(writer, sheet_name='IAM_Roles', index=False)
        pd.DataFrame(config_data).to_excel(writer, sheet_name='AWS_Config', index=False)
        pd.DataFrame(ip_alerts).to_excel(writer, sheet_name='IP_Alerts', index=False)

# === Main ===
if __name__ == "__main__":
    print("üîç Collecting AWS audit data...")
    all_data = fetch_data()
    iam_data = fetch_iam_data()
    config_data = fetch_config_compliance()
    ip_alerts = fetch_public_ip_alerts(all_data[5], all_data[4])

    print("üìÑ Exporting to Word...")
    export_to_word("aws_audit_extended.docx", all_data, iam_data, config_data, ip_alerts)

    print("üìä Exporting to Excel...")
    export_to_excel("aws_audit_extended.xlsx", all_data, iam_data, config_data, ip_alerts)

    print("‚úÖ AWS audit completed. Files saved: aws_audit_extended.docx and aws_audit_extended.xlsx")