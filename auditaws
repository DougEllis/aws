import boto3
import pandas as pd
from docx import Document
from datetime import datetime
import pytz

# ---------- Utility to strip timezone from datetime ----------
def strip_tz(df):
    for col in df.select_dtypes(include=['datetimetz']).columns:
        df[col] = df[col].dt.tz_localize(None)
    return df

# ---------- EC2 Resource Collection ----------
def fetch_ec2_resources():
    ec2 = boto3.client('ec2')

    vpcs = ec2.describe_vpcs()['Vpcs']
    subnets = ec2.describe_subnets()['Subnets']
    sgs = ec2.describe_security_groups()['SecurityGroups']
    eips = ec2.describe_addresses()['Addresses']

    vpc_data = [{
        'VPC ID': v.get('VpcId'),
        'CIDR': v.get('CidrBlock'),
        'Is Default': v.get('IsDefault')
    } for v in vpcs]

    subnet_data = [{
        'Subnet ID': s.get('SubnetId'),
        'VPC ID': s.get('VpcId'),
        'CIDR': s.get('CidrBlock'),
        'AZ': s.get('AvailabilityZone')
    } for s in subnets]

    sg_data = [{
        'SG ID': g.get('GroupId'),
        'Name': g.get('GroupName'),
        'VPC ID': g.get('VpcId'),
        'Inbound Rules': str(g.get('IpPermissions')),
        'Outbound Rules': str(g.get('IpPermissionsEgress'))
    } for g in sgs]

    eip_data = [{
        'Public IP': e.get('PublicIp', 'N/A'),
        'Private IP': e.get('PrivateIpAddress', 'N/A'),
        'Instance ID': e.get('InstanceId', 'Unattached'),
        'Network Interface': e.get('NetworkInterfaceId', 'N/A')
    } for e in eips]

    return vpc_data, subnet_data, sg_data, eip_data

# ---------- IAM Data ----------
def fetch_iam_data():
    iam = boto3.client('iam')

    users = iam.list_users()['Users']
    roles = iam.list_roles()['Roles']

    user_data = []
    for u in users:
        mfa_devices = iam.list_mfa_devices(UserName=u['UserName'])['MFADevices']
        keys = iam.list_access_keys(UserName=u['UserName'])['AccessKeyMetadata']
        user_data.append({
            'User': u['UserName'],
            'Created': u['CreateDate'],
            'MFA': 'Yes' if mfa_devices else 'No',
            'Access Keys': ', '.join([k['AccessKeyId'] for k in keys])
        })

    role_data = [{
        'Role': r['RoleName'],
        'Created': r['CreateDate'],
        'Trust Policy': str(r['AssumeRolePolicyDocument'])
    } for r in roles]

    return user_data, role_data

# ---------- AWS Config Compliance ----------
def fetch_config_compliance():
    config = boto3.client('config')
    rules = config.describe_config_rules()['ConfigRules']
    compliance_data = []

    for rule in rules:
        try:
            status = config.get_compliance_details_by_config_rule(
                ConfigRuleName=rule['ConfigRuleName'],
                ComplianceTypes=['COMPLIANT', 'NON_COMPLIANT'],
                Limit=1
            )['EvaluationResults']

            for eval in status:
                ts = eval['ResultRecordedTime']
                ts = ts.replace(tzinfo=None) if ts.tzinfo else ts
                compliance_data.append({
                    'Rule': rule['ConfigRuleName'],
                    'Compliance Type': eval['ComplianceType'],
                    'Evaluated At': ts.strftime('%Y-%m-%d %H:%M:%S')
                })
        except Exception as e:
            compliance_data.append({
                'Rule': rule['ConfigRuleName'],
                'Compliance Type': 'Unknown',
                'Evaluated At': 'N/A'
            })

    return compliance_data

# ---------- Public IP Usage Alerts ----------
def alert_on_public_ips(eip_data):
    alerts = []
    for ip in eip_data:
        if ip.get('Instance ID', 'Unattached') == 'Unattached':
            alerts.append({
                'Alert': 'Unused EIP may incur cost',
                'Public IP': ip.get('Public IP')
            })
    return alerts

# ---------- Export to Word ----------
def export_to_word(filename, vpcs, subnets, sgs, eips, iam_users, iam_roles, config, alerts):
    doc = Document()
    doc.add_heading('AWS Environment Audit Report', 0)

    def add_table(title, data):
        doc.add_heading(title, level=2)
        if not data:
            doc.add_paragraph("No data available.")
            return
        table = doc.add_table(rows=1, cols=len(data[0]))
        hdr_cells = table.rows[0].cells
        for i, key in enumerate(data[0].keys()):
            hdr_cells[i].text = key
        for row in data:
            cells = table.add_row().cells
            for i, value in enumerate(row.values()):
                cells[i].text = str(value)

    add_table('VPCs', vpcs)
    add_table('Subnets', subnets)
    add_table('Security Groups', sgs)
    add_table('Elastic IPs', eips)
    add_table('IAM Users', iam_users)
    add_table('IAM Roles', iam_roles)
    add_table('AWS Config Compliance', config)
    add_table('Public IP Alerts', alerts)

    doc.save(filename)

# ---------- Export to Excel ----------
def export_to_excel(filename, all_data, iam_data, config_data, ip_alerts):
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        pd.DataFrame(all_data[0]).pipe(strip_tz).to_excel(writer, sheet_name='VPCs', index=False)
        pd.DataFrame(all_data[1]).pipe(strip_tz).to_excel(writer, sheet_name='Subnets', index=False)
        pd.DataFrame(all_data[2]).pipe(strip_tz).to_excel(writer, sheet_name='SecurityGroups', index=False)
        pd.DataFrame(all_data[3]).pipe(strip_tz).to_excel(writer, sheet_name='ElasticIPs', index=False)
        pd.DataFrame(iam_data[0]).pipe(strip_tz).to_excel(writer, sheet_name='IAM_Users', index=False)
        pd.DataFrame(iam_data[1]).pipe(strip_tz).to_excel(writer, sheet_name='IAM_Roles', index=False)
        pd.DataFrame(config_data).pipe(strip_tz).to_excel(writer, sheet_name='AWS_Config', index=False)
        pd.DataFrame(ip_alerts).pipe(strip_tz).to_excel(writer, sheet_name='IP_Alerts', index=False)

# ---------- Main ----------
if __name__ == '__main__':
    vpc_data, subnet_data, sg_data, eip_data = fetch_ec2_resources()
    iam_users, iam_roles = fetch_iam_data()
    config_data = fetch_config_compliance()
    ip_alerts = alert_on_public_ips(eip_data)

    export_to_word('aws_audit_extended.docx', vpc_data, subnet_data, sg_data, eip_data, iam_users, iam_roles, config_data, ip_alerts)
    export_to_excel('aws_audit_extended.xlsx', (vpc_data, subnet_data, sg_data, eip_data), (iam_users, iam_roles), config_data, ip_alerts)

    print("âœ… Audit complete. Files saved: aws_audit_extended.docx and aws_audit_extended.xlsx")