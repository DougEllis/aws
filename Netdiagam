import boto3
import json
import csv
import ipaddress
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

REGION = "ap-southeast-2"

# AWS Clients
ec2 = boto3.client('ec2', region_name=REGION)
logs = boto3.client('logs', region_name=REGION)

def classify_ip(ip):
    try:
        ip_obj = ipaddress.ip_address(ip)
        return 'External' if ip_obj.is_global else 'Internal'
    except ValueError:
        return 'Unknown'

def get_instances():
    instances = ec2.describe_instances()
    data = []
    for res in instances['Reservations']:
        for inst in res['Instances']:
            interfaces = [ni['NetworkInterfaceId'] for ni in inst.get('NetworkInterfaces', [])]
            data.append({
                'InstanceId': inst['InstanceId'],
                'PrivateIP': inst.get('PrivateIpAddress'),
                'PublicIP': inst.get('PublicIpAddress'),
                'NetworkInterfaces': interfaces,
                'SecurityGroups': [sg['GroupId'] for sg in inst['SecurityGroups']]
            })
    return data

def get_flow_logs():
    flow_logs = ec2.describe_flow_logs()
    return flow_logs['FlowLogs']

def get_sample_flow_events(log_group):
    streams = logs.describe_log_streams(logGroupName=log_group)['logStreams']
    events = []
    for stream in streams[:1]:  # Limit for example
        log_events = logs.get_log_events(logGroupName=log_group, logStreamName=stream['logStreamName'], limit=50)
        for event in log_events['events']:
            events.append(event['message'])
    return events

def parse_flow_logs(flow_logs):
    records = []
    for flow in flow_logs:
        log_group = flow['LogGroupName']
        try:
            events = get_sample_flow_events(log_group)
            for message in events:
                parts = message.split()
                src_ip, dst_ip = parts[3], parts[4]
                src_port, dst_port = parts[5], parts[6]
                direction = 'Outbound' if classify_ip(dst_ip) == 'External' else 'Inbound'
                records.append({
                    'SourceIP': src_ip,
                    'DestinationIP': dst_ip,
                    'SourcePort': src_port,
                    'DestinationPort': dst_port,
                    'Direction': direction
                })
        except Exception as e:
            print(f"Log group fetch failed: {log_group}, error: {e}")
    return records

def export_csv(data, filename='aws_network_flows.csv'):
    df = pd.DataFrame(data)
    df.to_csv(filename, index=False)
    print(f"‚úÖ CSV export complete: {filename}")

def generate_flow_map(data):
    G = nx.DiGraph()
    for record in data:
        src = record['SourceIP']
        dst = record['DestinationIP']
        direction = record['Direction']
        label = f"{record['SourcePort']}‚Üí{record['DestinationPort']}"
        color = 'blue' if direction == 'Internal' else 'red'
        G.add_edge(src, dst, label=label, color=color)

    pos = nx.spring_layout(G, seed=42)
    edges = G.edges()
    colors = [G[u][v]['color'] for u,v in edges]
    labels = nx.get_edge_attributes(G, 'label')

    plt.figure(figsize=(12, 8))
    nx.draw(G, pos, edges=edges, edge_color=colors, with_labels=True, node_color='lightgray', node_size=800)
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels, font_size=8)
    plt.title("AWS Network Flow Map")
    plt.axis('off')
    plt.tight_layout()
    plt.savefig("aws_network_flow_map.png")
    plt.show()
    print("üó∫Ô∏è Visual flow map saved: aws_network_flow_map.png")

def main():
    print("üîç Collecting AWS Network Info...")
    instances = get_instances()
    flows = get_flow_logs()
    flow_data = parse_flow_logs(flows)

    export_csv(flow_data)
    generate_flow_map(flow_data)

if __name__ == "__main__":
    main()
