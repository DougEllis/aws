import boto3
from graphviz import Digraph

# Initialize AWS clients
session = boto3.Session(profile_name='default', region_name='us-east-1')
ec2 = session.client('ec2')
rds = session.client('rds')

# Fetch AWS data
vpcs = ec2.describe_vpcs()['Vpcs']
subnets = ec2.describe_subnets()['Subnets']
instances = ec2.describe_instances()['Reservations']
rds_instances = rds.describe_db_instances()['DBInstances']
nat_gateways = ec2.describe_nat_gateways()['NatGateways']
route_tables = ec2.describe_route_tables()['RouteTables']

# Graph setup
dot = Digraph('AWS_Topology', format='svg')
dot.attr(rankdir='LR', size='10')

# Colors
colors = {
    'vpc': 'lightblue',
    'subnet': 'lightgrey',
    'ec2': 'orange',
    'rds': 'green',
    'nat': 'pink',
    'route_table': 'yellow'
}

# Helper: Add node with color
def add_node(id, label, type_):
    dot.node(id, label=label, style='filled', fillcolor=colors.get(type_, 'white'))

# Build VPCs
for vpc in vpcs:
    vpc_id = vpc['VpcId']
    add_node(vpc_id, f"VPC\n{vpc_id}", 'vpc')

    # Subnets in this VPC
    for subnet in filter(lambda x: x['VpcId'] == vpc_id, subnets):
        subnet_id = subnet['SubnetId']
        az = subnet['AvailabilityZone']
        add_node(subnet_id, f"Subnet\n{subnet_id}\n{az}", 'subnet')
        dot.edge(vpc_id, subnet_id)

        # EC2 Instances in subnet
        for res in instances:
            for inst in res['Instances']:
                if inst['SubnetId'] == subnet_id:
                    inst_id = inst['InstanceId']
                    add_node(inst_id, f"EC2\n{inst_id}", 'ec2')
                    dot.edge(subnet_id, inst_id)

        # NAT Gateways
        for nat in nat_gateways:
            if nat['SubnetId'] == subnet_id:
                nat_id = nat['NatGatewayId']
                add_node(nat_id, f"NAT\n{nat_id}", 'nat')
                dot.edge(subnet_id, nat_id)

    # RDS in VPC
    for db in rds_instances:
        if db['DBSubnetGroup']['VpcId'] == vpc_id:
            db_id = db['DBInstanceIdentifier']
            add_node(db_id, f"RDS\n{db_id}", 'rds')
            for subnet in db['DBSubnetGroup']['Subnets']:
                dot.edge(subnet['SubnetIdentifier'], db_id)

    # Route Tables
    for rt in filter(lambda x: x['VpcId'] == vpc_id, route_tables):
        rt_id = rt['RouteTableId']
        add_node(rt_id, f"RouteTable\n{rt_id}", 'route_table')
        for assoc in rt.get('Associations', []):
            subnet_id = assoc.get('SubnetId')
            if subnet_id:
                dot.edge(rt_id, subnet_id)

# Save to SVG
dot.render(filename='aws_topology_graph', cleanup=True)
print("âœ… Diagram saved as aws_topology_graph.svg")
